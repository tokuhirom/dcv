// Code generated by MockGen. DO NOT EDIT.
// Source: internal/docker/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/docker/interfaces.go -destination=internal/docker/mock_docker.go -package=docker
//

// Package docker is a generated GoMock package.
package docker

import (
	exec "os/exec"
	reflect "reflect"

	models "github.com/tokuhirom/dcv/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDockerClient is a mock of DockerClient interface.
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
	isgomock struct{}
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient.
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance.
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return m.recorder
}

// Compose mocks base method.
func (m *MockDockerClient) Compose(projectName string) ComposeClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compose", projectName)
	ret0, _ := ret[0].(ComposeClientInterface)
	return ret0
}

// Compose indicates an expected call of Compose.
func (mr *MockDockerClientMockRecorder) Compose(projectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compose", reflect.TypeOf((*MockDockerClient)(nil).Compose), projectName)
}

// ExecuteInteractive mocks base method.
func (m *MockDockerClient) ExecuteInteractive(containerID string, command []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInteractive", containerID, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteInteractive indicates an expected call of ExecuteInteractive.
func (mr *MockDockerClientMockRecorder) ExecuteInteractive(containerID, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInteractive", reflect.TypeOf((*MockDockerClient)(nil).ExecuteInteractive), containerID, command)
}

// GetContainerLogs mocks base method.
func (m *MockDockerClient) GetContainerLogs(containerID string, follow bool) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogs", containerID, follow)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogs indicates an expected call of GetContainerLogs.
func (mr *MockDockerClientMockRecorder) GetContainerLogs(containerID, follow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogs", reflect.TypeOf((*MockDockerClient)(nil).GetContainerLogs), containerID, follow)
}

// GetDindContainerLogs mocks base method.
func (m *MockDockerClient) GetDindContainerLogs(hostContainerID, targetContainerID string, follow bool) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDindContainerLogs", hostContainerID, targetContainerID, follow)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDindContainerLogs indicates an expected call of GetDindContainerLogs.
func (mr *MockDockerClientMockRecorder) GetDindContainerLogs(hostContainerID, targetContainerID, follow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDindContainerLogs", reflect.TypeOf((*MockDockerClient)(nil).GetDindContainerLogs), hostContainerID, targetContainerID, follow)
}

// GetStats mocks base method.
func (m *MockDockerClient) GetStats() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDockerClientMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDockerClient)(nil).GetStats))
}

// InspectContainer mocks base method.
func (m *MockDockerClient) InspectContainer(containerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectContainer", containerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectContainer indicates an expected call of InspectContainer.
func (mr *MockDockerClientMockRecorder) InspectContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectContainer", reflect.TypeOf((*MockDockerClient)(nil).InspectContainer), containerID)
}

// InspectImage mocks base method.
func (m *MockDockerClient) InspectImage(imageID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectImage", imageID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectImage indicates an expected call of InspectImage.
func (mr *MockDockerClientMockRecorder) InspectImage(imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectImage", reflect.TypeOf((*MockDockerClient)(nil).InspectImage), imageID)
}

// InspectNetwork mocks base method.
func (m *MockDockerClient) InspectNetwork(networkID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectNetwork", networkID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectNetwork indicates an expected call of InspectNetwork.
func (mr *MockDockerClientMockRecorder) InspectNetwork(networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectNetwork", reflect.TypeOf((*MockDockerClient)(nil).InspectNetwork), networkID)
}

// InspectVolume mocks base method.
func (m *MockDockerClient) InspectVolume(volumeName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectVolume", volumeName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectVolume indicates an expected call of InspectVolume.
func (mr *MockDockerClientMockRecorder) InspectVolume(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectVolume", reflect.TypeOf((*MockDockerClient)(nil).InspectVolume), volumeName)
}

// KillContainer mocks base method.
func (m *MockDockerClient) KillContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillContainer indicates an expected call of KillContainer.
func (mr *MockDockerClientMockRecorder) KillContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillContainer", reflect.TypeOf((*MockDockerClient)(nil).KillContainer), containerID)
}

// ListAllContainers mocks base method.
func (m *MockDockerClient) ListAllContainers(showAll bool) ([]models.DockerContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllContainers", showAll)
	ret0, _ := ret[0].([]models.DockerContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllContainers indicates an expected call of ListAllContainers.
func (mr *MockDockerClientMockRecorder) ListAllContainers(showAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllContainers", reflect.TypeOf((*MockDockerClient)(nil).ListAllContainers), showAll)
}

// ListComposeProjects mocks base method.
func (m *MockDockerClient) ListComposeProjects() ([]models.ComposeProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComposeProjects")
	ret0, _ := ret[0].([]models.ComposeProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComposeProjects indicates an expected call of ListComposeProjects.
func (mr *MockDockerClientMockRecorder) ListComposeProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComposeProjects", reflect.TypeOf((*MockDockerClient)(nil).ListComposeProjects))
}

// ListContainerFiles mocks base method.
func (m *MockDockerClient) ListContainerFiles(containerID, path string) ([]models.ContainerFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainerFiles", containerID, path)
	ret0, _ := ret[0].([]models.ContainerFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainerFiles indicates an expected call of ListContainerFiles.
func (mr *MockDockerClientMockRecorder) ListContainerFiles(containerID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainerFiles", reflect.TypeOf((*MockDockerClient)(nil).ListContainerFiles), containerID, path)
}

// ListDindContainers mocks base method.
func (m *MockDockerClient) ListDindContainers(containerID string) ([]models.DockerContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDindContainers", containerID)
	ret0, _ := ret[0].([]models.DockerContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDindContainers indicates an expected call of ListDindContainers.
func (mr *MockDockerClientMockRecorder) ListDindContainers(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDindContainers", reflect.TypeOf((*MockDockerClient)(nil).ListDindContainers), containerID)
}

// ListImages mocks base method.
func (m *MockDockerClient) ListImages(showAll bool) ([]models.DockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", showAll)
	ret0, _ := ret[0].([]models.DockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockDockerClientMockRecorder) ListImages(showAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockDockerClient)(nil).ListImages), showAll)
}

// ListNetworks mocks base method.
func (m *MockDockerClient) ListNetworks() ([]models.DockerNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks")
	ret0, _ := ret[0].([]models.DockerNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockDockerClientMockRecorder) ListNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockDockerClient)(nil).ListNetworks))
}

// ListVolumes mocks base method.
func (m *MockDockerClient) ListVolumes() ([]models.DockerVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes")
	ret0, _ := ret[0].([]models.DockerVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockDockerClientMockRecorder) ListVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockDockerClient)(nil).ListVolumes))
}

// ReadContainerFile mocks base method.
func (m *MockDockerClient) ReadContainerFile(containerID, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadContainerFile", containerID, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadContainerFile indicates an expected call of ReadContainerFile.
func (mr *MockDockerClientMockRecorder) ReadContainerFile(containerID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadContainerFile", reflect.TypeOf((*MockDockerClient)(nil).ReadContainerFile), containerID, path)
}

// RemoveContainer mocks base method.
func (m *MockDockerClient) RemoveContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockDockerClientMockRecorder) RemoveContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockDockerClient)(nil).RemoveContainer), containerID)
}

// RemoveImage mocks base method.
func (m *MockDockerClient) RemoveImage(imageID string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", imageID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockDockerClientMockRecorder) RemoveImage(imageID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockDockerClient)(nil).RemoveImage), imageID, force)
}

// RemoveNetwork mocks base method.
func (m *MockDockerClient) RemoveNetwork(networkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNetwork", networkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNetwork indicates an expected call of RemoveNetwork.
func (mr *MockDockerClientMockRecorder) RemoveNetwork(networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetwork", reflect.TypeOf((*MockDockerClient)(nil).RemoveNetwork), networkID)
}

// RemoveVolume mocks base method.
func (m *MockDockerClient) RemoveVolume(volumeName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", volumeName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockDockerClientMockRecorder) RemoveVolume(volumeName, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockDockerClient)(nil).RemoveVolume), volumeName, force)
}

// RestartContainer mocks base method.
func (m *MockDockerClient) RestartContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartContainer indicates an expected call of RestartContainer.
func (mr *MockDockerClientMockRecorder) RestartContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartContainer", reflect.TypeOf((*MockDockerClient)(nil).RestartContainer), containerID)
}

// StartContainer mocks base method.
func (m *MockDockerClient) StartContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockDockerClientMockRecorder) StartContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockDockerClient)(nil).StartContainer), containerID)
}

// StopContainer mocks base method.
func (m *MockDockerClient) StopContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockDockerClientMockRecorder) StopContainer(containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockDockerClient)(nil).StopContainer), containerID)
}

// MockComposeClientInterface is a mock of ComposeClientInterface interface.
type MockComposeClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComposeClientInterfaceMockRecorder
	isgomock struct{}
}

// MockComposeClientInterfaceMockRecorder is the mock recorder for MockComposeClientInterface.
type MockComposeClientInterfaceMockRecorder struct {
	mock *MockComposeClientInterface
}

// NewMockComposeClientInterface creates a new mock instance.
func NewMockComposeClientInterface(ctrl *gomock.Controller) *MockComposeClientInterface {
	mock := &MockComposeClientInterface{ctrl: ctrl}
	mock.recorder = &MockComposeClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComposeClientInterface) EXPECT() *MockComposeClientInterfaceMockRecorder {
	return m.recorder
}

// Down mocks base method.
func (m *MockComposeClientInterface) Down() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Down")
	ret0, _ := ret[0].(error)
	return ret0
}

// Down indicates an expected call of Down.
func (mr *MockComposeClientInterfaceMockRecorder) Down() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Down", reflect.TypeOf((*MockComposeClientInterface)(nil).Down))
}

// KillService mocks base method.
func (m *MockComposeClientInterface) KillService(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillService", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillService indicates an expected call of KillService.
func (mr *MockComposeClientInterfaceMockRecorder) KillService(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillService", reflect.TypeOf((*MockComposeClientInterface)(nil).KillService), serviceName)
}

// ListContainers mocks base method.
func (m *MockComposeClientInterface) ListContainers(showAll bool) ([]models.ComposeContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", showAll)
	ret0, _ := ret[0].([]models.ComposeContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockComposeClientInterfaceMockRecorder) ListContainers(showAll any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockComposeClientInterface)(nil).ListContainers), showAll)
}

// RemoveService mocks base method.
func (m *MockComposeClientInterface) RemoveService(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockComposeClientInterfaceMockRecorder) RemoveService(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockComposeClientInterface)(nil).RemoveService), serviceName)
}

// RestartService mocks base method.
func (m *MockComposeClientInterface) RestartService(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartService", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartService indicates an expected call of RestartService.
func (mr *MockComposeClientInterfaceMockRecorder) RestartService(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartService", reflect.TypeOf((*MockComposeClientInterface)(nil).RestartService), serviceName)
}

// StartService mocks base method.
func (m *MockComposeClientInterface) StartService(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartService indicates an expected call of StartService.
func (mr *MockComposeClientInterfaceMockRecorder) StartService(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockComposeClientInterface)(nil).StartService), serviceName)
}

// StopService mocks base method.
func (m *MockComposeClientInterface) StopService(serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopService", serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopService indicates an expected call of StopService.
func (mr *MockComposeClientInterfaceMockRecorder) StopService(serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockComposeClientInterface)(nil).StopService), serviceName)
}

// Top mocks base method.
func (m *MockComposeClientInterface) Top() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Top")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Top indicates an expected call of Top.
func (mr *MockComposeClientInterfaceMockRecorder) Top() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Top", reflect.TypeOf((*MockComposeClientInterface)(nil).Top))
}

// Up mocks base method.
func (m *MockComposeClientInterface) Up(detach bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up", detach)
	ret0, _ := ret[0].(error)
	return ret0
}

// Up indicates an expected call of Up.
func (mr *MockComposeClientInterfaceMockRecorder) Up(detach any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockComposeClientInterface)(nil).Up), detach)
}
